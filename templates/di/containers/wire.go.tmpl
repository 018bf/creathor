//go:build wireinject
// +build wireinject

package containers

import (
	"context"
	"{{ .Module }}/internal/configs"
	"github.com/google/wire"
	"github.com/sirupsen/logrus"
)

type App struct {
	config *configs.Config
	logger *logrus.Logger
}

func provideLogger(config *configs.Config) (*logrus.Logger, error) {
	logLevel, err := logrus.ParseLevel(config.LogLevel)
	if err != nil {
		return nil, err
	}
	logrus.SetLevel(logLevel)
	logger := logrus.StandardLogger()
	return logger, nil
}

func provideConfig(path string) (*configs.Config, error) {
	return configs.ParseConfig(path)
}

// Start - runs main function
func (a App) Start() error {
	panic("implement me")
}

func InitApp(_ context.Context, _ string) (*App, error) {
	wire.Build(
		provideConfig,
		provideLogger,
		wire.Struct(new(App), "*"),
	)
	return &App{}, nil
}
